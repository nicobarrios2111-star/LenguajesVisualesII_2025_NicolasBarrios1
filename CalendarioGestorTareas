Commit 1: Estructura base y planificación inicial del proyecto con CSV


import tkinter as tk
from tkinter import ttk, messagebox
import csv
import os

# Archivo CSV donde se guardarán las tareas
CSV_FILE = "tareas.csv"

# Crear el archivo si no existe
if not os.path.exists(CSV_FILE):
    with open(CSV_FILE, "w", newline="", encoding="utf-8") as file:
        writer = csv.writer(file)
        writer.writerow(["fecha", "titulo", "descripcion", "tipo", "hora"])

# Ventana principal
class CalendarioApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Calendario con Gestor de Tareas")
        self.root.geometry("600x400")
        
        # Label de bienvenida
        self.label = ttk.Label(root, text="Bienvenido al Calendario con Gestor de Tareas", font=("Helvetica", 14))
        self.label.pack(pady=20)
        
        # Placeholder para calendario (se agregará en próximos commits)
        self.placeholder = ttk.Label(root, text="Aquí se mostrará el calendario", foreground="gray")
        self.placeholder.pack(pady=10)
        
        # Botón de ejemplo
        self.boton = ttk.Button(root, text="Próximamente: Abrir ventana de tareas", command=self.proximamente)
        self.boton.pack(pady=10)
    
    def proximamente(self):
        messagebox.showinfo("Info", "Esta funcionalidad se agregará en el siguiente commit.")

# Ejecutar la aplicación
if __name__ == "__main__":
    root = tk.Tk()
    app = CalendarioApp(root)
    root.mainloop()




Commit 2: Calendario funcional y Treeview para tareas


import tkinter as tk
from tkinter import ttk, messagebox
from tkcalendar import Calendar
import csv
import os

# Archivo CSV donde se guardarán las tareas
CSV_FILE = "tareas.csv"

# Crear el archivo si no existe
if not os.path.exists(CSV_FILE):
    with open(CSV_FILE, "w", newline="", encoding="utf-8") as file:
        writer = csv.writer(file)
        writer.writerow(["fecha", "titulo", "descripcion", "tipo", "hora"])

# Función para leer tareas de una fecha
def leer_tareas(fecha):
    tareas = []
    with open(CSV_FILE, newline="", encoding="utf-8") as file:
        reader = csv.DictReader(file)
        for row in reader:
            if row["fecha"] == fecha:
                tareas.append(row)
    return tareas

# Ventana principal
class CalendarioApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Calendario con Gestor de Tareas")
        self.root.geometry("700x500")

        # Label de bienvenida
        self.label = ttk.Label(root, text="Calendario con Gestor de Tareas", font=("Helvetica", 16))
        self.label.pack(pady=10)

        # Calendario
        self.cal = Calendar(root, selectmode="day")
        self.cal.pack(pady=10)

        # Botón para mostrar tareas
        self.btn_mostrar = ttk.Button(root, text="Mostrar tareas de la fecha", command=self.mostrar_tareas)
        self.btn_mostrar.pack(pady=5)

        # Treeview para mostrar tareas
        self.tree = ttk.Treeview(root, columns=("titulo", "descripcion", "tipo", "hora"), show="headings")
        self.tree.heading("titulo", text="Título")
        self.tree.heading("descripcion", text="Descripción")
        self.tree.heading("tipo", text="Tipo")
        self.tree.heading("hora", text="Hora")
        self.tree.pack(fill="both", expand=True, pady=10)

    def mostrar_tareas(self):
        fecha = self.cal.get_date()
        tareas = leer_tareas(fecha)

        # Limpiar Treeview
        for i in self.tree.get_children():
            self.tree.delete(i)

        # Agregar tareas
        if tareas:
            for t in tareas:
                self.tree.insert("", "end", values=(t["titulo"], t["descripcion"], t["tipo"], t["hora"]))
        else:
            messagebox.showinfo("Info", f"No hay tareas para {fecha}")

# Ejecutar la aplicación
if __name__ == "__main__":
    root = tk.Tk()
    app = CalendarioApp(root)
    root.mainloop()